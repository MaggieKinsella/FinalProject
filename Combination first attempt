#################################
# CSC 102 Defuse the Bomb Project
# GUI and Phase class definitions
# Team: Abigail, Leslye, Maggie
#################################

# import the configs
from bomb_configs import *
# other imports
from tkinter import *
import tkinter
from threading import Thread
from time import sleep
import os
import sys

#########
# classes
#########
# the LCD display GUI
class Lcd(Frame):
    def __init__(self, window):
        super().__init__(window, bg="black")
        window.attributes("-fullscreen", True)
        self._timer = None
        self._button = None
        self.setupBoot()

    def setupBoot(self):
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=2)
        self.columnconfigure(2, weight=1)
        self._lscroll = Label(self, bg="black", fg="white", font=("Courier New", 14), text="", justify=LEFT)
        self._lscroll.grid(row=0, column=0, columnspan=3, sticky=W)
        self.pack(fill=BOTH, expand=True)

    def setup(self):
        self._ltimer = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Time left: ")
        self._ltimer.grid(row=1, column=0, columnspan=3, sticky=W)
        self._lkeypad = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Keypad phase: ")
        self._lkeypad.grid(row=2, column=0, columnspan=3, sticky=W)
        self._lwires = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Wires phase: ")
        self._lwires.grid(row=3, column=0, columnspan=3, sticky=W)
        self._lbutton = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Button phase: ")
        self._lbutton.grid(row=4, column=0, columnspan=3, sticky=W)
        self._ltoggles = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Toggles phase: ")
        self._ltoggles.grid(row=5, column=0, columnspan=2, sticky=W)
        self._lstrikes = Label(self, bg="black", fg="#00ff00", font=("Courier New", 18), text="Strikes left: ")
        self._lstrikes.grid(row=5, column=2, sticky=W)
        if (SHOW_BUTTONS):
            self._bpause = tkinter.Button(self, bg="red", fg="white", font=("Courier New", 18), text="Pause", anchor=CENTER, command=self.pause)
            self._bpause.grid(row=6, column=0, pady=40)
            self._bquit = tkinter.Button(self, bg="red", fg="white", font=("Courier New", 18), text="Quit", anchor=CENTER, command=self.quit)
            self._bquit.grid(row=6, column=2, pady=40)

    def setTimer(self, timer):
        self._timer = timer

    def setButton(self, button):
        self._button = button

    def pause(self):
        if (RPi):
            self._timer.pause()

    def conclusion(self, success=False):
        self._lscroll["text"] = ""
        self._ltimer.destroy()
        self._lkeypad.destroy()
        self._lwires.destroy()
        self._lbutton.destroy()
        self._ltoggles.destroy()
        self._lstrikes.destroy()
        if (SHOW_BUTTONS):
            self._bpause.destroy()
            self._bquit.destroy()
        self._bretry = tkinter.Button(self, bg="red", fg="white", font=("Courier New", 18), text="Retry", anchor=CENTER, command=self.retry)
        self._bretry.grid(row=1, column=0, pady=40)
        self._bquit = tkinter.Button(self, bg="red", fg="white", font=("Courier New", 18), text="Quit", anchor=CENTER, command=self.quit)
        self._bquit.grid(row=1, column=2, pady=40)

    def retry(self):
        os.execv(sys.executable, ["python3"] + [sys.argv[0]])
        exit(0)

    def quit(self):
        if (RPi):
            self._timer._running = False
            self._timer._component.blink_rate = 0
            self._timer._component.fill(0)
            for pin in self._button._rgb:
                pin.value = True
        exit(0)

class PhaseThread(Thread):
    def __init__(self, name, component=None, target=None):
        super().__init__(name=name, daemon=True)
        self._component = component
        self._target = target
        self._defused = False
        self._failed = False
        self._value = None
        self._running = False

class Timer(PhaseThread):
    def __init__(self, component, initial_value, name="Timer"):
        super().__init__(name, component)
        self._value = initial_value
        self._paused = False
        self._min = ""
        self._sec = ""
        self._interval = 1

    def run(self):
        self._running = True
        while (self._running):
            if (not self._paused):
                self._update()
                self._component.print(str(self))
                sleep(self._interval)
                if (self._value == 0):
                    self._running = False
                self._value -= 1
            else:
                sleep(0.1)

    def _update(self):
        self._min = f"{self._value // 60}".zfill(2)
        self._sec = f"{self._value % 60}".zfill(2)

    def pause(self):
        self._paused = not self._paused
        self._component.blink_rate = (2 if self._paused else 0)

    def __str__(self):
        return f"{self._min}:{self._sec}"

class Keypad(PhaseThread):
    def __init__(self, component, target, name="Keypad"):
        super().__init__(name, component, target)
        self._value = ""

    def run(self):
        self._running = True
        while (self._running):
            if (self._component.pressed_keys):
                while (self._component.pressed_keys):
                    try:
                        key = self._component.pressed_keys[0]
                    except:
                        key = ""
                    sleep(0.1)
                self._value += str(key)
                if (self._value == self._target):
                    self._defused = True
                elif (self._value != self._target[0:len(self._value)]):
                    self._failed = True
            sleep(0.1)

    def __str__(self):
        return "DEFUSED" if self._defused else self._value

# ----- ADD MOCK COMPONENT + INSTANTIATION -----
class MockKeypadComponent:
    def __init__(self):
        self.pressed_keys = []

# This part would go in your main game loop or setup
if __name__ == "__main__":
    mock_keypad_component = MockKeypadComponent()
    keypad_phase = Keypad(mock_keypad_component, target="2421")
    keypad_phase.start()

    # Simulate input for testing
    def simulate_input():
        sleep(2)
        mock_keypad_component.pressed_keys.append("2")
        sleep(0.2)
        mock_keypad_component.pressed_keys.clear()
        sleep(1)
        mock_keypad_component.pressed_keys.append("4")
        sleep(0.2)
        mock_keypad_component.pressed_keys.clear()
        sleep(1)
        mock_keypad_component.pressed_keys.append("2")
        sleep(0.2)
        mock_keypad_component.pressed_keys.clear()
        sleep(1)
        mock_keypad_component.pressed_keys.append("1")
        sleep(0.2)
        mock_keypad_component.pressed_keys.clear()

    Thread(target=simulate_input, daemon=True).start()

    while not keypad_phase._defused and not keypad_phase._failed:
        print("Current input:", keypad_phase)
        sleep(0.5)

    if keypad_phase._defused:
        print("✅ Keypad DEFUSED with 2421!")
    else:
        print("❌ Keypad FAILED.")
